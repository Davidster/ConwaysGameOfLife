{"version":3,"sources":["utils.js","conwayUtils.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["makeMatrix","dims","defaultValue","length","Error","Array","fill","map","_","slice","countLivingNeighbors","grid","i","j","filter","ii","jj","reduce","x","y","animateGameOfLife","pencil","settings","MAX_WIDTH","CANVAS_WIDTH","CELL_SIZE","MAX_HEIGHT","CANVAS_HEIGHT","fillStyle","WHITE","fillRect","GREEN","numRows","numCols","drawLivingCells","BLACK","moveTo","lineTo","stroke","drawGridLines","MIN_CANVAS_DIM","MAX_CANVAS_DIM","App","buttonText","state","GAME_RUNNING","toggleGameRunning","wasRunning","setState","clearInterval","clockID","c","canvasRef","current","getContext","constants","setInterval","newGrid","livingNeighborCount","updateGameOfLife","CLOCK_MILLIS","onCanvasClick","evt","stopPropagation","rect","getBoundingClientRect","nativeEvent","clientX","left","clientY","top","Math","floor","render","className","width","height","ref","onClick","id","type","undefined","React","createRef","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8daba9e7.chunk.js","sourcesContent":["// done recursively for fun\nconst makeMatrix = ({ dims, defaultValue }) => {\n  if (dims.length > 2) {\n    throw new Error(\"cannot accept more than two dims for valid matrix\");\n  } else if (dims.length === 2) {\n    return Array(dims[0])\n      .fill(null)\n      .map(_ => makeMatrix({ dims: dims.slice(1), defaultValue }));\n  } else if (dims.length === 1) {\n    return Array(dims[0]).fill(defaultValue);\n  } else {\n    throw new Error(\"dims cannot be zero\");\n  }\n};\n\nexport { makeMatrix };\n","import { makeMatrix } from \"./utils.js\";\n\nfunction updateGameOfLife(grid) {\n  const numRows = grid.length;\n  const numCols = grid[0].length;\n\n  const newGrid = makeMatrix({\n    dims: [numRows, numCols],\n    defaultValue: false\n  });\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      // rules of Conway's 'Game of Life'\n      const livingNeighborCount = countLivingNeighbors(grid, i, j);\n      if (grid[i][j]) {\n        // if alive:\n        if (livingNeighborCount <= 1) {\n          // die by underpopulation\n          newGrid[i][j] = false;\n        } else if (livingNeighborCount <= 3) {\n          // stay alive\n          newGrid[i][j] = true;\n        } else {\n          // die by overpopulation\n          newGrid[i][j] = false;\n        }\n      } else {\n        // if dead:\n        if (livingNeighborCount === 3) {\n          // come to life by reproduction\n          newGrid[i][j] = true;\n        }\n      }\n    }\n  }\n\n  // copy newGrid to grid\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      grid[i][j] = newGrid[i][j];\n    }\n  }\n}\n\nfunction countLivingNeighbors(grid, i, j) {\n  return [\n    [i - 1, j + 1],\n    [i - 1, j],\n    [i - 1, j - 1],\n    [i, j + 1],\n    [i, j - 1],\n    [i + 1, j + 1],\n    [i + 1, j],\n    [i + 1, j - 1]\n  ]\n    .filter(([ii, jj]) => ii >= 0 && jj >= 0 && ii < grid.length && jj < grid[0].length)\n    .map(([ii, jj]) => (grid[ii][jj] ? 1 : 0)) // 1 if alive, 0 if dead\n    .reduce((x, y) => x + y, 0); // sum\n}\n\nfunction animateGameOfLife(grid, pencil, settings) {\n  const MAX_WIDTH = settings.CANVAS_WIDTH * settings.CELL_SIZE;\n  const MAX_HEIGHT = settings.CANVAS_HEIGHT * settings.CELL_SIZE;\n\n  pencil.fillStyle = settings.WHITE;\n  pencil.fillRect(0, 0, MAX_WIDTH, MAX_HEIGHT);\n\n  pencil.fillStyle = settings.GREEN;\n  drawLivingCells(grid, pencil, settings);\n\n  pencil.fillStyle = settings.BLACK;\n  drawGridLines(grid, pencil, settings);\n}\n\nfunction drawLivingCells(grid, pencil, settings) {\n  const CELL_SIZE = settings.CELL_SIZE;\n  const numRows = grid.length;\n  const numCols = grid[0].length;\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (grid[i][j]) {\n        // draw cell\n        pencil.fillRect(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n      }\n    }\n  }\n}\nfunction drawGridLines(_, pencil, settings) {\n  const CELL_SIZE = settings.CELL_SIZE;\n  for (let i = 0; i <= settings.CANVAS_WIDTH; i++) {\n    pencil.moveTo(i * CELL_SIZE, 0);\n    pencil.lineTo(i * CELL_SIZE, settings.CANVAS_HEIGHT * CELL_SIZE);\n    pencil.stroke();\n  }\n  for (let j = 0; j <= settings.CANVAS_HEIGHT; j++) {\n    pencil.moveTo(0, j * CELL_SIZE);\n    pencil.lineTo(settings.CANVAS_WIDTH * CELL_SIZE, j * CELL_SIZE);\n    pencil.stroke();\n  }\n}\n\nexport { updateGameOfLife, animateGameOfLife };\n","export default {\n  WHITE: \"#FFFFFF\",\n  BLACK: \"#000000\",\n  GREEN: \"#1C8000\",\n  MIN_CANVAS_DIM: 20,\n  MAX_CANVAS_DIM: 200\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeMatrix } from \"./utils.js\";\nimport { updateGameOfLife, animateGameOfLife } from \"./conwayUtils.js\";\nimport constants from \"./constants.js\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      CELL_SIZE: 10,\n      CANVAS_WIDTH: 50,\n      CANVAS_HEIGHT: 50,\n      GAME_RUNNING: false,\n      CLOCK_MILLIS: 500\n    };\n\n    this.clockID = undefined;\n    this.canvasRef = React.createRef();\n    this.grid = makeMatrix({\n      dims: [this.state.CANVAS_WIDTH, this.state.CANVAS_HEIGHT],\n      defaultValue: false\n    });\n\n    // start a pentadecathlon by default\n    const alive = [\n      [25, 9],\n      [25, 10],\n      [24, 11],\n      [26, 11],\n      [25, 12],\n      [25, 13],\n      [25, 14],\n      [25, 15],\n      [24, 16],\n      [26, 16],\n      [25, 17],\n      [25, 18]\n    ];\n    for (let [i, j] of alive) {\n      this.grid[i][j] = true;\n    }\n  }\n\n  buttonText = () => {\n    return this.state.GAME_RUNNING ? \"stop\" : \"run\";\n  };\n  toggleGameRunning = () => {\n    const wasRunning = this.state.GAME_RUNNING;\n    this.setState({\n      ...this.state,\n      GAME_RUNNING: !this.state.GAME_RUNNING\n    });\n    if (wasRunning) {\n      clearInterval(this.clockID);\n    } else {\n      // start the game\n      const c = this.canvasRef.current.getContext(\"2d\");\n      animateGameOfLife(this.grid, c, { ...this.state, ...constants });\n      this.clockID = setInterval(() => {\n        updateGameOfLife(this.grid);\n        animateGameOfLife(this.grid, c, { ...this.state, ...constants });\n      }, this.state.CLOCK_MILLIS);\n    }\n  };\n\n  onCanvasClick = evt => {\n    evt.stopPropagation();\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    const x = evt.nativeEvent.clientX - rect.left;\n    const y = evt.nativeEvent.clientY - rect.top;\n\n    const i = Math.floor(x / this.state.CELL_SIZE);\n    const j = Math.floor(y / this.state.CELL_SIZE);\n\n    if (i >= 0 && j >= 0 && i < this.grid.length && j < this.grid[0].length) {\n      this.grid[i][j] = !this.grid[i][j];\n    }\n    animateGameOfLife(this.grid, this.canvasRef.current.getContext(\"2d\"), { ...this.state, ...constants });\n  };\n\n  render = () => (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>Conway's Game of Life</div>\n        <canvas\n          width={this.state.CANVAS_WIDTH * this.state.CELL_SIZE}\n          height={this.state.CANVAS_HEIGHT * this.state.CELL_SIZE}\n          ref={this.canvasRef}\n          onClick={this.onCanvasClick}\n        ></canvas>\n\n        <div id=\"control-panel\">\n          <button type=\"button\" onClick={this.toggleGameRunning}>\n            {this.buttonText()}\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}